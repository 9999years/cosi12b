/**
 * class for storing kts result data; versatile and useful for interchange
 * @author Rebecca Turner
 * @version 0.0.1
 * @license AGPL3.0 gnu.org/licenses/agpl.html
 */

import java.util.stream.Stream;
import java.util.function.ToIntFunction;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * a processed kts result --- generated by KeirseyEvaluator but can also be
 * used directly to store kts test data; capable of calculating string output
 * and building itself up one question at a time
 */
public class KeirseyResult {
	// normally these are built up with parseQuestion
	// but if you really need you can set them manually
	// A answers
	public int E_AMOUNT = 0;
	public int S_AMOUNT = 0;
	public int T_AMOUNT = 0;
	public int J_AMOUNT = 0;

	// B answers
	public int I_AMOUNT = 0;
	public int N_AMOUNT = 0;
	public int F_AMOUNT = 0;
	public int P_AMOUNT = 0;

	/**
	 * axis indexes for parseQuestion and questionString
	 */
	public static enum GROUP {
		IE, SN, TF, JP
	}

	public String name;

	/**
	 * get an array of double fractions for the portions of each kts
	 * dimension answered with B
	 * @return a 4-element array of the %B answers for each axis (IE, SN,
	 * TF, and JP)
	 */
	public double[] getPercentages() {
		return new double[] {
			(double) I_AMOUNT / (E_AMOUNT + I_AMOUNT),
			(double) N_AMOUNT / (S_AMOUNT + N_AMOUNT),
			(double) F_AMOUNT / (T_AMOUNT + F_AMOUNT),
			(double) P_AMOUNT / (J_AMOUNT + P_AMOUNT)
		};
	}

	/**
	 * get the A and B answers for a question
	 * like 9A-1B
	 */
	private String questionString(KeirseyResult.GROUP group) {
		int a_amount, b_amount;
		if(group == KeirseyResult.GROUP.IE) {
			a_amount = this.E_AMOUNT;
			b_amount = this.I_AMOUNT;
		} else if(group == KeirseyResult.GROUP.SN) {
			a_amount = this.S_AMOUNT;
			b_amount = this.N_AMOUNT;
		} else if(group == KeirseyResult.GROUP.TF) {
			a_amount = this.T_AMOUNT;
			b_amount = this.F_AMOUNT;
		} else if(group == KeirseyResult.GROUP.JP) {
			a_amount = this.J_AMOUNT;
			b_amount = this.P_AMOUNT;
		} else {
			throw new IllegalArgumentException("Invalid group ID");
		}
		return String.format("%dA-%dB", a_amount, b_amount);
	}

	/**
	 * formats the result to a cosi 12b-compliant string
	 */
	public String toString() {
		// get percent values, map to nearest whole percent as an int
		int[] percents = Arrays.stream(this.getPercentages())
			.mapToInt(k -> (int) Math.round(k * 100.0d))
			.toArray();

		return String.format(
			"%s:\n%s %s %s %s\n[%d%%, %d%%, %d%%, %d%%] = %s\n\n",
			this.name,
			this.questionString(KeirseyResult.GROUP.IE),
			this.questionString(KeirseyResult.GROUP.SN),
			this.questionString(KeirseyResult.GROUP.TF),
			this.questionString(KeirseyResult.GROUP.JP),
			percents[KeirseyResult.GROUP.IE.ordinal()],
			percents[KeirseyResult.GROUP.SN.ordinal()],
			percents[KeirseyResult.GROUP.TF.ordinal()],
			percents[KeirseyResult.GROUP.JP.ordinal()],
			this.getMBTI()
		);
	}

	/**
	 * we need this and bQuestion about 4x each in parseQuestion
	 */
	private int aQuestion(KeirseyLineParser.ANSWER answer) {
		return answer == KeirseyLineParser.ANSWER.A ? 1 : 0;
	}

	private int bQuestion(KeirseyLineParser.ANSWER answer) {
		return answer == KeirseyLineParser.ANSWER.B ? 1 : 0;
	}

	/**
	 * adds an answer to the result's internal dataset
	 * @param group the group id (IE, SN, TF, or JP)
	 * @param answer the answer byte (KeirseyLineParser.ANSWER.BLANK,
	 * ANSWER.A, or ANSWER.B)
	 */
	public void parseQuestion(GROUP group, KeirseyLineParser.ANSWER answer) {
		if(group == KeirseyResult.GROUP.IE) {
			this.E_AMOUNT += aQuestion(answer);
			this.I_AMOUNT += bQuestion(answer);
		} else if(group == KeirseyResult.GROUP.SN) {
			this.S_AMOUNT += aQuestion(answer);
			this.N_AMOUNT += bQuestion(answer);
		} else if(group == KeirseyResult.GROUP.TF) {
			this.T_AMOUNT += aQuestion(answer);
			this.F_AMOUNT += bQuestion(answer);
		} else if(group == KeirseyResult.GROUP.JP) {
			this.J_AMOUNT += aQuestion(answer);
			this.P_AMOUNT += bQuestion(answer);
		} else {
			throw new IllegalArgumentException("Invalid group ID");
		}
	}

	/**
	 * gets the mtbi-like type represented by the result
	 * @return the type represented by the result as an uppercase string
	 * like ENFP or IXTJ
	 */
	public String getMBTI() {
		StringBuilder ret = new StringBuilder();
		ret.append(E_AMOUNT == I_AMOUNT ? "X" : E_AMOUNT > I_AMOUNT ? "E" : "I");
		ret.append(S_AMOUNT == N_AMOUNT ? "X" : S_AMOUNT > N_AMOUNT ? "S" : "N");
		ret.append(T_AMOUNT == F_AMOUNT ? "X" : T_AMOUNT > F_AMOUNT ? "T" : "F");
		ret.append(J_AMOUNT == P_AMOUNT ? "X" : J_AMOUNT > P_AMOUNT ? "J" : "P");
		return ret.toString();
	}

	KeirseyResult(String name) {
		this.name = name;
	}
}
